// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import "../../SupportProjects.sol";

contract SupportProjectEchidnaTest is SupportProjects {
    constructor() {
        owner = msg.sender;
        projectTax = 5;
        initialize();
    }

    function initialize() private {
        projects.push(
            DataTypes.Project({
                id: 0,
                owner: address(this),
                title: "Test Project",
                description: "This is a test project",
                imageURL: "https://example.com/image.png",
                cost: 10 ether,
                amountRaised: 0,
                timestamp: block.timestamp,
                expiresAt: block.timestamp + 30 days,
                supporters: 0,
                status: DataTypes.Status.OPEN
            })
        );

        balance = 0;
    }

    function echidna_test_support_project() public payable returns (bool) {
        // Return true if msg.value generated by Echidna is 0 to prevent the test from failing due to invalid input,
        // we can support a project only by values greater than 0
        if (msg.value == 0) {
            return true;
        }

        uint projectId = 0;
        uint initialBalance = address(this).balance;
        uint initialSupporters = projects[projectId].supporters;
        uint initialAmountRaised = projects[projectId].amountRaised;

        // Execute the supportProject function with a random value
        (bool success, ) = address(this).call{value: msg.value}(
            abi.encodeWithSignature("supportProject(uint256)", projectId)
        );

        require(success, "Failed to support the project");

        // Check if the project's supporters count increased by 1
        bool supportersCheck = projects[projectId].supporters == initialSupporters + 1;

        // Check if the project's amountRaised increased by the sent value
        bool amountRaisedCheck = projects[projectId].amountRaised ==
            initialAmountRaised + msg.value;

        // Check if the contract's balance increased by the sent value
        bool balanceCheck = address(this).balance == initialBalance + msg.value;

        return supportersCheck && amountRaisedCheck && balanceCheck;
    }
}
